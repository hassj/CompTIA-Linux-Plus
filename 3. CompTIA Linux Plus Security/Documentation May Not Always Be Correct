Something else that you're gonna
have to deal with within your career
is the fact that documentation might not be
quite as accurate or worded as well as it could be.
So documentation might be wrong.
When taking a look at managing user passwords,
we can demonstrate how a password works
and how authentication works
by using the openssl and passwd sub command.
Now for the purpose of demonstration,
I'm using minus one, a relatively weak algorithm,
but that gives me a short hash for the password.
I'm entering the password here of Password1.
If I don't provide something called a SALT,
random characters,
then a SALT will be generated automatically,
and that's usually what I want when I'm creating a password,
because then that means if I have five or six users
that have the same default password,
I can't tell that they have the same password,
because each of the passwords is going to be different.
If I provide though the SALT, normally the SALT
is gonna be required when we're authenticating a user,
but not when I'm setting a user's password.
If I set a user's password this way, then everyone
who has the password Password1 will have exactly
the same password hash and it's very easy
to tell then those users that have the default password,
and that's something we would normally want to avoid.
Now later on in this CompTIA series,
we will go through and take a look at
automating system administration
and we are gonna see the documentation provided
with Ansible advises you to go through
and when generating a password to provide the SALT.
That is probably not the best way of doing it,
because as I say, every time we go through then
and generate a password with that way,
the password is gonna have exactly the same hash value.
It's gonna be very easy to detect users who haven't yet
changed from the default system assigned password.
So try to avoid setting a SALT
when configuring the password.
But why don't we go through to our command line now
just to see this and get the idea of what we mean
about the SALT and how passwords are authenticated.
Now, the first thing is we are just looking at
the documentation of how to generate an encrypted
password for the Ansible user module.
As I say, there will be another course
where we take a look at Ansible
for the new CompTIA Linux Plus.
But here they include the SALT.
If we exclude the SALT, a random SALT will be generated,
and that's going to be far more secure.
Using the same SALT value, you're gonna get
exactly the same password.
We're still working on our Ubuntu system at the moment
and we can see how this works.
If I go through and use openssl and the passwd sub command,
we're going to use an MD five algorithm.
It works better for the demonstration
because the password is shorter,
and I'm going to use then Password1 as my password.
This password hash is irreversible encryption.
It can't be decrypted,
so we can't tell what the password is.
But there are some elements that are clear text
that is important.
First element here is the algorithm that we've used.
So one is our MD five algorithm.
More normal on Linux, it would have a value of six
being SHA 512.
Then we have the random SALT that was generated.
Then we have our hashed password.
If I go through and run exactly the same thing again,
because of the SALT is now different,
we are getting a different password each time.
The reason why though the SALT is important,
if I want to authenticate,
remember we can't decrypt our password
so we can only compare hash to values.
If I wanted to check the password
that this user was supplying was correct,
I can go through, read the password value,
and from that password value I can see what the SALT is.
So I can read the algorithm and I can read the SALT.
If I then go through and put the SALT in,
so I'm just copying it here, pasting that in.
Now when we run through, you can see that we're getting
exactly the same password hash coming back.
And of course, if I run it multiple times,
I'm gonna get exactly the same hash value coming back.
Supplying of our SALT is there for authenticating passwords.
We shouldn't be supplying the SALT
when we're generating passwords.
We generate our password without supplying the SALT
so we have a random SALT.
A random SALT then is going to
generate a random password hash.